/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestERC20Panic,
  TestERC20PanicInterface,
} from "../../../contracts/test/TestERC20Panic";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PERMIT_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60e0604052346200018f5762000014620001fa565b6020685465737450616e696360b81b81830152620000316200020f565b6450414e494360d81b8282015282519091906001600160401b0381116200017f575b6000916200006d8262000067855462000224565b62000261565b80601f8311600114620000f157508190620000a4958492620000e5575b50508160011b916000199060031b1c191617905562000315565b60126080524660a052620000b762000417565b60c052604051610de490816200054b82396080518161051a015260a05181610be7015260c05181610c0e0152f35b0151905038806200008a565b600080529194601f1986167f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5639385905b82821062000166575050916001939187620000a49894106200014c575b505050811b01905562000315565b015160001960f88460031b161c191690553880806200013e565b8060018697829497870151815501960194019062000121565b6200018962000194565b62000053565b600080fd5b50634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b03821117620001c757604052565b620001d162000194565b604052565b601f909101601f19168101906001600160401b03821190821017620001c757604052565b604051906200020982620001ab565b60098252565b604051906200021e82620001ab565b60058252565b90600182811c9216801562000256575b60208310146200024057565b634e487b7160e01b600052602260045260246000fd5b91607f169162000234565b601f81116200026e575050565b60009081805260208220906020601f850160051c83019410620002ae575b601f0160051c01915b828110620002a257505050565b81815560010162000295565b90925082906200028c565b90601f8211620002c7575050565b60019160009083825260208220906020601f850160051c830194106200030a575b601f0160051c01915b828110620002ff5750505050565b8181558301620002f1565b9092508290620002e8565b80519091906001600160401b03811162000407575b60019062000344816200033e845462000224565b620002b9565b602080601f83116001146200038257508192939460009262000376575b5050600019600383901b1c191690821b179055565b01519050388062000361565b6001600052601f198316959091907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6926000905b888210620003ef5750508385969710620003d5575b505050811b019055565b015160001960f88460031b161c19169055388080620003cb565b808785968294968601518155019501930190620003b6565b6200041162000194565b6200032a565b6040516000908154906200042b8262000224565b92838252602093848301936001908181169081600014620005305750600114620004f0575b505091816200046a620004ea93620004db950382620001d6565b519020604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f95810195865260208601929092527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc69085015246606085015230608085015291829060a0850190565b03601f198101835282620001d6565b51902090565b908592506000805282600020916000925b8284106200051a57505050820101816200046a62000450565b8054868501860152879490930192810162000501565b60ff19168652505050604082019050816200046a6200045056fe60806040526004361015610013575b600080fd5b60003560e01c806306fdde031461012b578063095ea7b31461012257806318160ddd1461011957806323b872dd1461011057806330adf81f14610107578063313ce567146100fe5780633644e515146100f557806340c10f19146100ec57806370a08231146100e35780637ecebe00146100da57806395d89b41146100d1578063a9059cbb146100c8578063d505accf146100bf5763dd62ed3e146100b757600080fd5b61000e610a63565b5061000e6107dc565b5061000e610733565b5061000e61068d565b5061000e610645565b5061000e6105fd565b5061000e610562565b5061000e61053e565b5061000e6104ff565b5061000e6104c3565b5061000e610470565b5061000e610451565b5061000e6103ac565b5061000e61026d565b90600182811c9216801561017d575b602083101461014e57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691610143565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176101c857604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b919091602080825283519081818401526000945b828610610257575050601f817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092604095961161024a575b0116010190565b6000858286010152610243565b858101820151848701604001529481019461020b565b503461000e57600080600319360112610363576040519080805461029081610134565b8085529160019180831690811561032457506001146102ca575b6102c6856102ba81870382610187565b604051918291826101f7565b0390f35b80809450527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b82841061030c5750505081016020016102ba826102c66102aa565b805460208587018101919091529093019281016102f1565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016602087015250506040840192506102ba91508390506102c66102aa565b80fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361000e57565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361000e57565b503461000e57604060031936011261000e576103c6610366565b73ffffffffffffffffffffffffffffffffffffffff60243591336000526004602052826104178260406000209073ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b5560405192835216907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b503461000e57600060031936011261000e576020600254604051908152f35b503461000e57606060031936011261000e5761048a610366565b50610493610389565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b503461000e57600060031936011261000e5760206040517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98152f35b503461000e57600060031936011261000e57602060405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e57600060031936011261000e57602061055a610be2565b604051908152f35b503461000e57604060031936011261000e5761057c610366565b60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602073ffffffffffffffffffffffffffffffffffffffff6024359485600254811981116105f0575b0160025516938484526003825260408420818154019055604051908152a3602060405160018152f35b6105f8610adb565b6105c7565b503461000e57602060031936011261000e5773ffffffffffffffffffffffffffffffffffffffff61062c610366565b1660005260036020526020604060002054604051908152f35b503461000e57602060031936011261000e5773ffffffffffffffffffffffffffffffffffffffff610674610366565b1660005260056020526020604060002054604051908152f35b503461000e5760008060031936011261036357604051908060018054916106b383610134565b8086529282811690811561032457506001146106d9576102c6856102ba81870382610187565b92508083527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b82841061071b5750505081016020016102ba826102c66102aa565b80546020858701810191909152909301928101610700565b503461000e57604060031936011261000e5761074d610366565b73ffffffffffffffffffffffffffffffffffffffff6024359133600052600360205260406000208381548181106107cf575b039055169081600052600360205260406000208181540190556040519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203392a3602060405160018152f35b6107d7610adb565b61077f565b503461000e5760e060031936011261000e576107f6610366565b6107fe610389565b604435906064359060843560ff8116810361000e5760006020917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259461084642821015610b0b565b61097261097e610854610be2565b928a8a6108fc6108848373ffffffffffffffffffffffffffffffffffffffff166000526005602052604060002090565b938454946001860190556040519485938d8d8601968791959493909260a09360c08401977f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9855273ffffffffffffffffffffffffffffffffffffffff8092166020860152166040840152606083015260808201520152565b039161092e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093848101835282610187565b519020604051938491898301968790916042927f19010000000000000000000000000000000000000000000000000000000000008352600283015260228201520190565b03908101835282610187565b5190206040805191825260ff92909216602082015260a4359181019190915260c435606082015281805260809060015afa15610a56575b6000519083610a3882610a1373ffffffffffffffffffffffffffffffffffffffff956109ed8782168015159081610a4a575b50610b7d565b73ffffffffffffffffffffffffffffffffffffffff166000526004602052604060002090565b9073ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b556040519384528116931691602090a3005b9050888c1614386109e7565b610a5e610b70565b6109b5565b503461000e57604060031936011261000e576020610ad2610a82610366565b73ffffffffffffffffffffffffffffffffffffffff610a9f610389565b91166000526004835260406000209073ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b54604051908152f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b15610b1257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5045524d49545f444541444c494e455f455850495245440000000000000000006044820152fd5b506040513d6000823e3d90fd5b15610b8457565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f494e56414c49445f5349474e45520000000000000000000000000000000000006044820152fd5b6000467f000000000000000000000000000000000000000000000000000000000000000003610c3057507f000000000000000000000000000000000000000000000000000000000000000090565b6040518154919081610c4184610134565b80835260209485840194600191828116908115610d735750600114610d1b575b5050509181610c78610d1593610ce9950382610187565b519020604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f95810195865260208601929092527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc69085015246606085015230608085015291829060a0850190565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610187565b51902090565b91908693508280527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b828410610d5e5750505082010181610c78610d15610c61565b80548685018601528794909301928101610d45565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168752505050604083019150829050610c78610d15610c6156fea26469706673582212203e857a48092b78214865b038f47fb3cafa1b6ae4587e5b015db343af907bbc6364736f6c634300080e0033";

type TestERC20PanicConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestERC20PanicConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestERC20Panic__factory extends ContractFactory {
  constructor(...args: TestERC20PanicConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestERC20Panic> {
    return super.deploy(overrides || {}) as Promise<TestERC20Panic>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestERC20Panic {
    return super.attach(address) as TestERC20Panic;
  }
  override connect(signer: Signer): TestERC20Panic__factory {
    return super.connect(signer) as TestERC20Panic__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestERC20PanicInterface {
    return new utils.Interface(_abi) as TestERC20PanicInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestERC20Panic {
    return new Contract(address, _abi, signerOrProvider) as TestERC20Panic;
  }
}
